version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
  jq: circleci/jq@2.2.0

jobs:
  test:
    parameters:
      should_publish_images:
        type: boolean
      environment:
        type: string
      var_name_region:
        type: env_var_name
      var_name_ecr_account_url:
        type: env_var_name

    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.6
      - when:
          condition: << parameters.should_publish_images >>
          steps:
            - run:
                name: Check Required Envionment Variables
                command: |
                  set -e
                  test -n "${AWS_ACCESS_KEY_ID}"
                  test -n "${AWS_SECRET_ACCESS_KEY}"
                  test -n "${<< parameters.var_name_region >>}"
                  test -n "${<< parameters.var_name_ecr_account_url >>}"
            - run:
                name: Build Images
                command: |
                  DOCKER_BUILDKIT=1 docker build -t "${<< parameters.var_name_ecr_account_url >>}/<< parameters.environment >>/application:commit-${CIRCLE_SHA1}" --ssh default --progress plain .
                  DOCKER_BUILDKIT=1 docker build -t laravel:test --ssh default --progress plain --build-arg "BASE_IMAGE=${<< parameters.var_name_ecr_account_url >>}/<< parameters.environment >>/application:commit-${CIRCLE_SHA1}" .circleci/
                  docker build -t "${<< parameters.var_name_ecr_account_url >>}/<< parameters.environment >>/webserver:commit-${CIRCLE_SHA1}" .docker/nginx
      - unless:
          condition: << parameters.should_publish_images >>
          steps:
            - run:
                name: Build Images
                command: |
                  DOCKER_BUILDKIT=1 docker build -t laravel-base --ssh default --progress plain .
                  DOCKER_BUILDKIT=1 docker build -t laravel:test --ssh default --progress plain --build-arg BASE_IMAGE=laravel-base .circleci/
      - run:
          name: Check Code Style and Run Tests
          command: |
            docker-compose -f .circleci/docker-compose.ci.yml run --rm --entrypoint bash laravel -c "
              set -e
              cp .env.example .env
              php artisan key:generate --force
              (test -f ".php-cs-fixer.dist.php" && ./vendor/bin/php-cs-fixer fix --dry-run) || echo "Code Style config not found"
              curl \${DB_HOST}:\${DB_PORT} --http0.9 --retry-connrefused --retry 30 --output /dev/null --silent
              php artisan migrate --force
              ./vendor/bin/phpunit
            "
      - when:
          condition: << parameters.should_publish_images >>
          steps:
            - aws-ecr/ecr-login:
                account-url: << parameters.var_name_ecr_account_url >>
                region: << parameters.var_name_region >>
            - run:
                name: Publish Iamges
                command: |
                  docker push "${<< parameters.var_name_ecr_account_url >>}/<< parameters.envrionment >>/application:commit-${CIRCLE_SHA1}"
                  docker push "${<< parameters.var_name_ecr_account_url >>}/<< parameters.envrionment >>/webserver:commit-${CIRCLE_SHA1}"
  deploy:
    docker:
      - image: cimg/base:2021.04
    steps:
      - run:
          name: Check Required Envionment Variables
          command: |
            set -e
            test -n "${AWS_ACCOUNT_ID}"
            test -n "${AWS_REGION}"
            test -n "${AWS_ACCESS_KEY_ID}"
            test -n "${AWS_SECRET_ACCESS_KEY}"
      - run: # todo: add AWS CLI orb, call aws cloudformation deploy
          name: Deploy CloudFormation Stack
          command: echo "ToDo"

workflows:
  version: 2
  test-workflow:
    when:
      and:
        - not:
            equal: [ main, << pipeline.git.branch >> ]
        - not:
            equal: [ stage, << pipeline.git.branch >> ]
    jobs:
      - test:
          should_publish_images: false
          environment: none
          var_name_region: none
          var_name_ecr_account_url: none
  deploy-workflow-stage:
    when:
      equal: [ stage, << pipeline.git.branch >> ]
    jobs:
      - test:
          should_publish_images: true
          environment: stage
          var_name_region: AWS_REGION_STAGE
          var_name_ecr_account_url: AWS_ECR_ACCOUNT_URL_STAGE
      - deploy:
          requires:
            - test
  deploy-workflow-production:
    when:
      equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - test:
          should_publish_images: true
          environment: production
          var_name_region: AWS_REGION_PRODUCTION
          var_name_ecr_account_url: AWS_ECR_ACCOUNT_URL_PRODUCTION
      - deploy:
          requires:
            - test
